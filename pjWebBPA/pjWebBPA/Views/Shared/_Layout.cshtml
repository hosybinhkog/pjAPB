<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Web học fullstack hay nhất việt nam">
    <meta name="author" content="Nhóm Bình Phong Anh">
    <meta name="keywords" content="HTML , CSS , SCSS , JavaScript , Typescript">
    <title>@ViewBag.Title - ABPPRO</title>
    <link href="~/assets/boxicons-2.0.7/css/boxicons.min.css" rel="stylesheet" />
    <link href="~/assets/css/user.css" rel="stylesheet" />
    <link href="~/assets/css/styles.css" rel="stylesheet" />

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/handlebars/4.7.7/handlebars.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">

    <script>

        /**
         * Defines an instance of the Locator+ solution, to be instantiated
         * when the Maps library is loaded.
         */
        function LocatorPlus(configuration) {
            const locator = this;

            locator.locations = configuration.locations || [];
            locator.capabilities = configuration.capabilities || {};

            const mapEl = document.getElementById('map');
            const panelEl = document.getElementById('locations-panel');
            locator.panelListEl = document.getElementById('locations-panel-list');
            const sectionNameEl =
                document.getElementById('location-results-section-name');
            const resultsContainerEl = document.getElementById('location-results-list');

            const itemsTemplate = Handlebars.compile(
                document.getElementById('locator-result-items-tmpl').innerHTML);

            locator.searchLocation = null;
            locator.searchLocationMarker = null;
            locator.selectedLocationIdx = null;
            locator.userCountry = null;

            // Initialize the map -------------------------------------------------------
            locator.map = new google.maps.Map(mapEl, configuration.mapOptions);

            // Store selection.
            const selectResultItem = function (locationIdx, panToMarker, scrollToResult) {
                locator.selectedLocationIdx = locationIdx;
                for (let locationElem of resultsContainerEl.children) {
                    locationElem.classList.remove('selected');
                    if (getResultIndex(locationElem) === locator.selectedLocationIdx) {
                        locationElem.classList.add('selected');
                        if (scrollToResult) {
                            panelEl.scrollTop = locationElem.offsetTop;
                        }
                    }
                }
                if (panToMarker && (locationIdx != null)) {
                    locator.map.panTo(locator.locations[locationIdx].coords);
                }
            };

            // Create a marker for each location.
            const markers = locator.locations.map(function (location, index) {
                const marker = new google.maps.Marker({
                    position: location.coords,
                    map: locator.map,
                    title: location.title,
                });
                marker.addListener('click', function () {
                    selectResultItem(index, false, true);
                });
                return marker;
            });

            // Fit map to marker bounds.
            locator.updateBounds = function () {
                const bounds = new google.maps.LatLngBounds();
                if (locator.searchLocationMarker) {
                    bounds.extend(locator.searchLocationMarker.getPosition());
                }
                for (let i = 0; i < markers.length; i++) {
                    bounds.extend(markers[i].getPosition());
                }
                locator.map.fitBounds(bounds);
            };
            if (locator.locations.length) {
                locator.updateBounds();
            }

            // Get the distance of a store location to the user's location,
            // used in sorting the list.
            const getLocationDistance = function (location) {
                if (!locator.searchLocation) return null;

                // Fall back to straight-line distance.
                return google.maps.geometry.spherical.computeDistanceBetween(
                    new google.maps.LatLng(location.coords),
                    locator.searchLocation.location);
            };

            // Render the results list --------------------------------------------------
            const getResultIndex = function (elem) {
                return parseInt(elem.getAttribute('data-location-index'));
            };

            locator.renderResultsList = function () {
                let locations = locator.locations.slice();
                for (let i = 0; i < locations.length; i++) {
                    locations[i].index = i;
                }
                if (locator.searchLocation) {
                    sectionNameEl.textContent =
                        'Nearest locations (' + locations.length + ')';
                    locations.sort(function (a, b) {
                        return getLocationDistance(a) - getLocationDistance(b);
                    });
                } else {
                    sectionNameEl.textContent = `All locations (${locations.length})`;
                }
                const resultItemContext = { locations: locations };
                resultsContainerEl.innerHTML = itemsTemplate(resultItemContext);
                for (let item of resultsContainerEl.children) {
                    const resultIndex = getResultIndex(item);
                    if (resultIndex === locator.selectedLocationIdx) {
                        item.classList.add('selected');
                    }

                    const resultSelectionHandler = function () {
                        selectResultItem(resultIndex, true, false);
                    };

                    // Clicking anywhere on the item selects this location.
                    // Additionally, create a button element to make this behavior
                    // accessible under tab navigation.
                    item.addEventListener('click', resultSelectionHandler);
                    item.querySelector('.select-location')
                        .addEventListener('click', function (e) {
                            resultSelectionHandler();
                            e.stopPropagation();
                        });
                }
            };

            // Optional capability initialization --------------------------------------
            initializeSearchInput(locator);

            // Initial render of results -----------------------------------------------
            locator.renderResultsList();
        }

        /** When the search input capability is enabled, initialize it. */
        function initializeSearchInput(locator) {
            const geocodeCache = new Map();
            const geocoder = new google.maps.Geocoder();

            const searchInputEl = document.getElementById('location-search-input');
            const searchButtonEl = document.getElementById('location-search-button');

            const updateSearchLocation = function (address, location) {
                if (locator.searchLocationMarker) {
                    locator.searchLocationMarker.setMap(null);
                }
                if (!location) {
                    locator.searchLocation = null;
                    return;
                }
                locator.searchLocation = { 'address': address, 'location': location };
                locator.searchLocationMarker = new google.maps.Marker({
                    position: location,
                    map: locator.map,
                    title: 'My location',
                    icon: {
                        path: google.maps.SymbolPath.CIRCLE,
                        scale: 12,
                        fillColor: '#3367D6',
                        fillOpacity: 0.5,
                        strokeOpacity: 0,
                    }
                });

                // Update the locator's idea of the user's country, used for units. Use
                // `formatted_address` instead of the more structured `address_components`
                // to avoid an additional billed call.
                const addressParts = address.split(' ');
                locator.userCountry = addressParts[addressParts.length - 1];

                // Update map bounds to include the new location marker.
                locator.updateBounds();

                // Update the result list so we can sort it by proximity.
                locator.renderResultsList();
            };

            const geocodeSearch = function (query) {
                if (!query) {
                    return;
                }

                const handleResult = function (geocodeResult) {
                    searchInputEl.value = geocodeResult.formatted_address;
                    updateSearchLocation(
                        geocodeResult.formatted_address, geocodeResult.geometry.location);
                };

                if (geocodeCache.has(query)) {
                    handleResult(geocodeCache.get(query));
                    return;
                }
                const request = { address: query, bounds: locator.map.getBounds() };
                geocoder.geocode(request, function (results, status) {
                    if (status === 'OK') {
                        if (results.length > 0) {
                            const result = results[0];
                            geocodeCache.set(query, result);
                            handleResult(result);
                        }
                    }
                });
            };

            // Set up geocoding on the search input.
            searchButtonEl.addEventListener('click', function () {
                geocodeSearch(searchInputEl.value.trim());
            });

            // Add in an event listener for the Enter key.
            searchInputEl.addEventListener('keypress', function (evt) {
                if (evt.key === 'Enter') {
                    geocodeSearch(searchInputEl.value);
                }
            });
        }
    </script>
    <script>
        const CONFIGURATION = {
            "locations": [
                { "title": "49/1 Bùi Đình Tuý", "address1": "49/1 Bùi Đình Tuý", "address2": "Phường 24, Bình Thạnh, Thành phố Hồ Chí Minh, Vietnam", "coords": { "lat": 10.80810778268551, "lng": 106.7071450490738 }, "placeId": "ChIJgy9ryr0odTER2gp4JiIAWRw" }
            ],
            "mapOptions": { "center": { "lat": 38.0, "lng": -100.0 }, "fullscreenControl": true, "mapTypeControl": false, "streetViewControl": false, "zoom": 4, "zoomControl": true, "maxZoom": 17 },
            "mapsApiKey": "AIzaSyAAS0Pt4GiIckpJpl68Yz0O2VE_A3OQ9HI",
            "capabilities": { "input": true, "autocomplete": false, "directions": false, "distanceMatrix": false, "details": false }
        };

        function initMap() {
            new LocatorPlus(CONFIGURATION);
        }
    </script>
    <script id="locator-result-items-tmpl" type="text/x-handlebars-template">
        {{#each locations}}
        <li class="location-result" data-location-index="{{index}}">
            <button class="select-location">
                <h2 class="name">{{title}}</h2>
            </button>
            <div class="address">{{address1}}<br>{{address2}}</div>
        </li>
        {{/each}}
    </script>

</head>
<body>
    <header class="header">
        <div class="header__menu__toggle">
            <i class='bx bx-menu-alt-left'></i>
        </div>
        <h4 class="header__logo">
            <a href="/Home">
                APB<span>PRO</span> Nền Tảng Học Fullstack
            </a>
        </h4>
        <div class="header__search">
            <i class='bx bx-search icon-search header__search__icon'></i>
            <input type="text" spellcheck="false"
                   placeholder=" Tìm kiếm các phụ kiện mà bạn cần"
                   class="header__search__input">
        </div>
        @if (Session["login"] == null)
        {
            <div class="header__action">
                <button class="btn btn--primary header__action__btn">

                    <i class="bx bxs-user"></i>
                    @Html.ActionLink("Đăng nhập", "Login", "User")

                </button>
            </div>
        }
        else
        {
            <div class="header__action">
                <a href="@Url.Action("Index", "Me")" class="header__action__admin">
                    <img class="avatar"
                         src="
                     @if (Session["avatar"] != null)
                {
                    <text>@Session["avatar"].ToString()</text>
                } else
                {
                    <text>https://banner2.cleanpng.com/20180331/khw/kisspng-computer-icons-user-clip-art-user-5abf13d4b67e20.4808850915224718927475.jpg</text>
                }
                 "
                         alt="">
                    <span class="name_avatar">
                        @if (Session["displayName"] != null)
                        {

                            <text>@Session["displayName"].ToString()</text>
                        }
                        else
                        {

                            <text>@Session["email"].ToString()</text>
                        }
                    </span>
                </a>
                <button class="btn btn--cart header__action__btn">
                    <i class="bx bx-cart-alt"></i>
                    @Html.ActionLink("Khóa học", "Logout", "User")
                </button>
                <button class="btn btn--primary header__action__btn">
                    <i class="bx bxs-user"></i>
                    @Html.ActionLink("Đăng xuất", "Logout", "User")
                </button>
            </div>
        }

    </header>

    <div class="hero">
        <div class="slide-container">
            <div class="slide active">
                <div class="slide__left">
                    <h2 class="slide__left__title">
                        Thành Quả Của Học Viên
                    </h2>
                    <p class="slide__left__desc">
                        Để đạt được kết quả tốt trong mọi việc ta cần xác định mục tiêu rõ ràng cho việc đó. Học lập trình cũng không là ngoại lệ.<span>PRO</span> nào
                    </p>
                    <div>
                        <a href="" class="btn--sub">
                            Tìm kiếm ngay
                        </a>
                    </div>
                </div>
                <div class="slide__right">
                    <a href="">
                        <img src="~/assets/images/Banner_01_2.png" alt="">
                    </a>
                </div>
            </div>
            <div class="slide">
                <div class="slide__left">
                    <h2 class="slide__left__title">
                        Học ReactJS Miễn Phí!
                    </h2>
                    <p class="slide__left__desc">
                        Khóa học ReactJS từ cơ bản tới nâng cao. Kết quả của khóa học này là bạn có thể làm hầu hết các dự án thường gặp với ReactJS.APB<span>PRO</span> nào
                    </p>
                    <div>
                        <a href="" class="btn--sub">
                            Tìm kiếm ngay
                        </a>
                    </div>
                </div>
                <div class="slide__right">
                    <a href="">
                        <img src="~/assets/images/Banner_web_ReactJS.png" alt="">
                    </a>
                </div>
            </div>
            <div class="slide">
                <div class="slide__left">
                    <h2 class="slide__left__title">
                        APB<span style="color: aqua">PRO</span> Trên Youtube
                    </h2>
                    <p class="slide__left__desc">
                        APB<span style="color: aqua">PRO</span> được nhắc tới ở mọi nơi, ở đâu có cơ hội việc làm cho nghề IT và có những con người yêu thích lập trình. APB<span style="color: aqua">PRO</span> nào
                    </p>
                    <div>
                        <a href="" class="btn--sub">
                            Tìm kiếm ngay
                        </a>
                    </div>
                </div>
                <div class="slide__right">
                    <a href="">
                        <img src="~/assets/images/Banner_03_youtube.png" alt="">
                    </a>
                </div>
            </div>
            <div class="slide">
                <div class="slide__left">
                    <h2 class="slide__left__title">
                        APB<span>PRO</span> Trên Facebook
                    </h2>
                    <p class="slide__left__desc">
                        Tham gia cùng APO<span>PRO</span> nào
                    </p>
                    <div>
                        <a href="" class="btn--sub">
                            Tìm kiếm ngay
                        </a>
                    </div>
                </div>
                <div class="slide__right">
                    <a href="">
                        <img src="~/assets/images/Banner_04_2.png" alt="">
                    </a>
                </div>
            </div>
            <ul class="slide__control">
                <li class="slide__control_prev">
                    <i class="bx bx-chevron-left"></i>
                </li>
                <li class="slide__control__item active">
                    01
                </li>
                <li class="slide__control__item">
                    02
                </li>
                <li class="slide__control__item">
                    03
                </li>
                <li class="slide__control__item">
                    04
                </li>
                <li class="slide__control_next">
                    <i class="bx bx-chevron-right"></i>
                </li>
            </ul>
        </div>
    </div>

    <main>
        <div class="main">
            <div class="container">
                @RenderBody()
            </div>
        </div>
    </main>
    <footer class="footer">
        <div class="container">
            <div class="footer__container">
                <div class="footer__container__header">
                    <ul class="footer__container__header__block">
                        <h2 class="footer__container__header__block__logo">
                            APB <span>PRO</span> Nền Tảng Học Fullstack
                        </h2>
                        <li>
                            Điện thoại: <a href="tel:0972959036">0972959036</a>
                        </li>
                        <li>
                            Email:<a href="mailto:hosybinhkog@gmail.com">
                                hosybinhkog@gmail.com
                            </a>
                        </li>
                        <li>
                            Địa chỉ: Nhà 49/1, Đường Bùi Đình Túy, Phường 24, Bình Thạnh, Tp Hồ Chí Minh
                        </li>
                    </ul>
                    <ul class="footer__container__header__block">
                        <h2>Về APB<span>PRO</span></h2>
                        <li><a href="">Giới thiệu</a></li>
                        <li><a href="">Cơ hội làm việc</a></li>
                        <li><a href="">Đối tác</a></li>
                    </ul>
                    <ul class="footer__container__header__block">
                        <h2>Hỗ Trợ</h2>
                        <li><a href="">Liên hệ</a></li>
                        <li><a href="">Bảo mật</a></li>
                        <li><a href="">Điều khoản</a></li>
                        <li><a href="">Khiếu nại</a></li>
                    </ul>
                    <ul class="footer__container__header__block">
                        <h2>CÔNG TY CỔ PHẦN <span>TFTLOL</span></h2>
                        <li>
                            Mã số thuế: 0123456789
                        </li>
                        <li>
                            Ngày thành lập: 19/1/2022
                        </li>
                        <li>
                            Lĩnh vực: Lập trình Web, Giáo dục
                        </li>
                    </ul>
                </div>
                <div class="footer__container__footer">
                    <div class="copy-right">
                        © 2022 Web APB<span>PRO</span> - Nền tảng dạy lập trình Full Stack số 1 Việt Nam
                    </div>
                    <div class="footer__container__footer__social">
                        <a href="https://www.facebook.com/linhtranphuongle">
                            <i class='bx bxl-facebook-square icon-facebook'></i>
                        </a>
                        <a href="">
                            <i class='bx bxl-instagram-alt icon-ins'></i>
                        </a>
                        <a href="">
                            <i class='bx bxl-youtube icon-youtube'></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script type="text/javascript" src="~/assets/scripts/app1.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAAS0Pt4GiIckpJpl68Yz0O2VE_A3OQ9HI&callback=initMap&libraries=places,geometry&solution_channel=GMP_QB_locatorplus_v4_cA" async defer></script>
</body>
</html>
